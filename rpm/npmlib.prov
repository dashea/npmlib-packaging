#!/usr/bin/node

// npmlib.prov - generate RPM Provides data for NPM packages
// Copyright (C) 2018 David Shea <dshea@redhat.com>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// For the given package.json, return a Provides value of the form:
// npmlib(<name>) = <version>
function processPackageJSON(packageObj) {
  return `npmlib(${packageObj.name}) = ${packageObj.version}\n`;
}
module.exports.processPackageJSON = processPackageJSON;

function processBundledDeps(moduleDir) {
  const depsDir = path.join(moduleDir, 'node_modules');
  if (!fs.existsSync(depsDir)) {
    return '';
  }

  function depToProvides(depDir) {
    // if this is a scoped package, go one level deeper
    if (path.basename(depDir).startsWith('@')) {
      return fs.readdirSync(depDir).map(entry => depToProvides(path.join(depDir, entry))).join('');
    }

    const stat = fs.lstatSync(depDir);
    if (stat.isDirectory()) {
      const packageData = JSON.parse(fs.readFileSync(path.join(depDir, 'package.json')));
      return `bundled(npmlib(${packageData.name})) = ${packageData.version}\n`;
    }

    return '';
  }

  return fs.readdirSync(depsDir).map(entry => depToProvides(path.join(depsDir, entry))).join('');
}
module.exports.processBundledDeps = processBundledDeps;

function main() {
  // Stdin is a list of package.json paths to process, one per line
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false,
  });

  rl.on('line', (line) => {
    const packageData = fs.readFileSync(line);
    let providesData = processPackageJSON(JSON.parse(packageData));
    providesData += processBundledDeps(path.dirname(line));

    // use stdout directly, going through the readline interface generates extra line events
    process.stdout.write(providesData);
  });
}

if (require.main === module) {
  main();
}
