#!/usr/bin/node

// npmlib-symlink-deps - create node_modules symlinks for the given module
// Copyright (C) 2018 David Shea <dshea@redhat.com>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

const fs = require('fs-extra');
const path = require('path');
const semver = require('semver');

const npmlibPath = '/usr/lib/npm-library';

// find the built modules in $RPM_BUILD_ROOT
if (process.env.RPM_BUILD_ROOT === undefined) {
  console.error("RPM_BUILD_ROOT is not set in the environment");
  process.exit(1);
}

const buildrootPath = path.join(process.env.RPM_BUILD_ROOT, npmlibPath);
try {
  fs.readdirSync(buildrootPath).forEach(symlinkModule);
} catch (err) {
  process.stderr.write(err + '\n');
  process.exit(1);
}

function symlinkModule(module) {
  var modulePath = path.join(buildrootPath, module);
  // Iterate over each version in this module directory
  fs.readdirSync(modulePath).forEach((version) => { symlinkVersion(module, version); });
}

async function symlinkVersion(module, version) {
  var modulePath = path.join(buildrootPath, module, version);
  var packageData;

  try {
    // Create the node_modules directory
    fs.mkdirSync(path.join(modulePath, 'node_modules'));

    // Read package.json
    var packageData = JSON.parse(await fs.readFile(path.join(modulePath, 'package.json')));
  } catch (err) {
    process.stderr.write(err + '\n');
    process.exit(1);
  }

  // Process each dependency
  Object.entries(packageData.dependencies).forEach(([depName, depVersion]) => {
    processDependency(modulePath, depName, depVersion);
  });
}

async function processDependency(modulePath, depName, depVersion) {
  var depAvailable;

  try {
    // Find the available versions
    depAvailable = fs.readdirSync(path.join(npmlibPath, depName));
  } catch (err) {
    process.stderr.write(err + '\n');
    process.exit(1);
  }

  // Find the max matching version
  var maxVersion = semver.maxSatisfying(depAvailable, depVersion);
  if (maxVersion === null) {
    console.error("No version available for " + depName + "@" + depVersion);
    process.exit(1);
  }

  // Create the symlink
  try {
    await fs.symlink(path.join(npmlibPath, depName, maxVersion),
      path.join(modulePath, 'node_modules', depName));
  } catch (err) {
    console.error("module path is: " + modulePath);
    process.stderr.write(err + '\n');
    process.exit(1);
  }
}
