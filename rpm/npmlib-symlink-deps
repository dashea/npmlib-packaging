#!/usr/bin/node

// npmlib-symlink-deps - create node_modules symlinks for the given module
// Copyright (C) 2018 David Shea <dshea@redhat.com>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

const fs = require('fs');
const path = require('path');
const semver = require('semver');

const npmlibPath = '/usr/lib/npm-library';

function processPeerDependency(depDest, depName, depPath) {
  // if the dependency has peer dependencies, we can't just do a simple symlink.
  // for instance, say we have something like:
  // moduleA: { "dependencies": {"dep-framework": <version>, "dep-plugin": <version>}}
  // dep-plugin: { "peerDependencies": { "dep-framework": <version> }}
  //
  // dep-plugin expects that whatever requires dep-plugin will also require dep-framework,
  // making the framework API available from the plugin. Furthermore, we can't just treat
  // dep-framework as a dependency of dep-plugin, since pinning to a specific version of
  // dep-framework may break the version expectations for whatever requires
  // dep-framework+dep-plugin.  So for all of the require()s to work, we need
  // moduleA/node_modules to contain both dep-framework and dep-plugin, and
  // dep-plugin cannot be a symlink since it needs to be able to find
  // ../dep-framework/. Effectively, we need to bundle dep-plugin in any
  // modules that require it.

  // start by creating a directory for the plugin
  fs.mkdirSync(depDest);

  function copyDir(sourcePath, destPath) {
    fs.readdirSync(sourcePath).forEach((entry) => {
      const sourceFile = path.join(sourcePath, entry);
      const destFile = path.join(destPath, entry);
      const stat = fs.lstatSync(sourceFile);
      if (stat.isDirectory()) {
        // copy the directory struture and recurse
        fs.mkdirSync(destFile);
        copyDir(sourceFile, destFile);
      } else if (stat.isSymbolicLink()) {
        const target = fs.readlinkSync(sourceFile);
        fs.symlinkSync(target, destFile);
      } else {
        // copy everything else
        fs.copyFileSync(sourceFile, destFile);
      }
    });
  }

  copyDir(depPath, depDest);
}

class DepError extends Error {
  constructor(message) {
    super(message);
    this.name = 'DepError';
  }
}

function processDependency(modulePath, depName, depVersion) {
  // if the dependency already exists in node_modules, assume the dependency was
  // manually bundled and leave it alone
  const depDest = path.join(modulePath, 'node_modules', depName);
  if (fs.existsSync(depDest)) {
    return;
  }

  // figure out the source of the dependency
  // If we running from within a node_modules directory, the module being processed
  // is bundled within another module.  This means that the dependencies for
  // this bundled module may either be 1) in the directory above modulePath
  // (which is the outer module's node_modules), if it is a dependency shared
  // by the outer module, or 2) two directories above modulePath, if there is a
  // circular dependency on the outer module.
  // Otherwise use the global npm-library.
  let depPath;
  let depJSON;
  if (path.basename(path.dirname(fs.realpathSync(modulePath))) === 'node_modules') {
    const oneUp = path.join(modulePath, '..', depName);
    if (fs.existsSync(oneUp)) {
      // read the package.json to figure out if this version is compatible
      const oneUpPackageJSON = path.join(oneUp, 'package.json');
      const oneUpData = JSON.parse(fs.readFileSync(oneUpPackageJSON));
      if (semver.satisfies(oneUpData.version, depVersion)) {
        // use a path relative to node_modules
        depPath = path.join('..', '..', depName);
        depJSON = oneUpPackageJSON;
      }
    }

    // otherwise, check if the outer module name matches
    if (depPath === undefined) {
      const twoUp = path.join(modulePath, '..', '..');
      const twoUpPackageJSON = path.join(twoUp, 'package.json');
      if (fs.existsSync(twoUpPackageJSON)) {
        const twoUpData = JSON.parse(fs.readFileSync(twoUpPackageJSON));
        if (twoUpData.name === depName && semver.satisfies(twoUpData.version, depVersion)) {
          depPath = path.join('..', '..', '..');
          depJSON = twoUpPackageJSON;
        }
      }
    }
  }

  // otherwise, look for the dependency in npm-library
  const libraryPath = path.join(npmlibPath, depName);
  if ((depPath === undefined) && fs.existsSync(libraryPath)) {
    const depAvailable = fs.readdirSync(libraryPath);

    // Find the max matching version
    const maxVersion = semver.maxSatisfying(depAvailable, depVersion);
    if (maxVersion !== null) {
      depPath = path.join(libraryPath, maxVersion);
      depJSON = path.join(depPath, 'package.json');
    }
  }

  // nothing found by this point is an error
  if (depPath === undefined) {
    throw new DepError(`No version available for ${depName}@${depVersion}`);
  }


  // read the package.json for the dependency
  const depData = JSON.parse(fs.readFileSync(depJSON));

  // if the dep is a scoped module, create a directory for the scope
  if (depName.indexOf('/') !== -1) {
    const scopeDir = path.dirname(depDest);
    if (!fs.existsSync(scopeDir)) {
      fs.mkdirSync(path.dirname(depDest));
    }
  }

  // if the dependency has peerDependencies, things get a little more complicated
  if ('peerDependencies' in depData) {
    processPeerDependency(depDest, depName, depPath);
  } else {
    // Otherwise, just create a symlink
    fs.symlinkSync(depPath, depDest);
  }
}

function symlinkVersion(modulePath) {
  // Create the node_modules directory
  const nodeModulesPath = path.join(modulePath, 'node_modules');
  if (!fs.existsSync(nodeModulesPath)) {
    fs.mkdirSync(nodeModulesPath);
  }

  // Read package.json
  const packageData = JSON.parse(fs.readFileSync(path.join(modulePath, 'package.json')));

  // Process each dependency
  if (packageData.dependencies) {
    Object.entries(packageData.dependencies).forEach(([depName, depVersion]) => {
      processDependency(modulePath, depName, depVersion);
    });
  }

  // If there are optional dependencies, try to process those but ignore errors
  if (packageData.optionalDependencies) {
    Object.entries(packageData.optionalDependencies).forEach(([depName, depVersion]) => {
      try {
        processDependency(modulePath, depName, depVersion);
      } catch (e) {
        if (e.name !== 'DepError') {
          throw e;
        }
      }
    });
  }
}

function symlinkModule(modulePath) {
  // if this is a scoped module, we need to dive one level deeper
  // otherwise, each directory we find is a module version
  let scoped = false;
  if (path.basename(modulePath).startsWith('@')) {
    scoped = true;
  }

  fs.readdirSync(modulePath).forEach((subdir) => {
    const nextPath = path.join(modulePath, subdir);
    if (scoped) {
      symlinkModule(nextPath);
    } else {
      symlinkVersion(nextPath);
    }
  });
}

// figure out where we're running
// if there's a command line argument, use that as the module
// otherwise, find built modules in $RPM_BUILD_ROOT
if (process.argv.length >= 3) {
  symlinkVersion(process.argv[2]);
} else if (process.env.RPM_BUILD_ROOT !== undefined) {
  const buildrootPath = path.join(process.env.RPM_BUILD_ROOT, npmlibPath);
  fs.readdirSync(buildrootPath).forEach((subdir) => {
    const modulePath = path.join(buildrootPath, subdir);
    symlinkModule(modulePath);
  });
} else {
  console.error('RPM_BUILD_ROOT is not set in the environment and no argument provided');
  process.exit(1);
}
