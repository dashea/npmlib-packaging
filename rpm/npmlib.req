#!/usr/bin/node

// npmlib.req - generate RPM Requires data for NPM packages
// Copyright (C) 2018 David Shea <dshea@redhat.com>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

const readline = require('readline');
const path = require('path');
const fs = require('fs');

// For each dependency, decode the symlink in node_modules to
// a specific package version
function processDependency(modulePath, dependency) {
  const depPath = path.join(modulePath, 'node_modules', dependency);
  const stat = fs.lstatSync(depPath);

  if (stat.isSymbolicLink()) {
    // normal, symlinked dep
    const depLink = fs.readlinkSync(depPath);

    // The link will be of the form '../../../<depname>/<depversion>/'. All we
    // need is the version.
    const depVersion = path.basename(depLink);

    return `npmlib(${dependency}) = ${depVersion}`;
  }

  // otherwise it's a bundled peer dep, skip
  return '';
}
module.exports.processDependency = processDependency;

// walk the dependencies for the given package.json
function processPackageJSON(packagePath) {
  const modulePath = path.dirname(packagePath);
  const packageData = fs.readFileSync(packagePath);
  const packageObj = JSON.parse(packageData);

  let reqs = [];

  if ('dependencies' in packageObj) {
    reqs = Object
      .keys(packageObj.dependencies)
      .map(dependency => processDependency(modulePath, dependency))
      .filter(dependency => dependency !== '');
  }

  // look for bundled modules, and walk those package.json files
  const nodeModulesPath = path.join(modulePath, 'node_modules');
  if (fs.existsSync(nodeModulesPath)) {
    fs.readdirSync(nodeModulesPath).forEach((entry) => {
      const subModulePath = path.join(nodeModulesPath, entry);
      const subPackagePath = path.join(subModulePath, 'package.json');
      const stat = fs.lstatSync(subModulePath);
      if (stat.isDirectory() && fs.existsSync(subPackagePath)) {
        reqs = reqs.concat(processPackageJSON(subPackagePath));
      }
    });
  }

  // add the engine dependency
  reqs.push('nodejs(engine)');

  return reqs;
}
module.exports.processPackageJSON = processPackageJSON;

function main() {
  // Stdin is a list of package.json paths to process, one per line
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false,
  });

  let requires = [];
  rl
    .on('line', (line) => {
      requires = requires.concat(processPackageJSON(line));
    })
    .on('close', () => {
      // uniq the result
      requires.sort();
      requires.filter((req, idx) => !(requires[idx + 1] === req));

      process.stdout.write(requires.join('\n'));
      process.stdout.write('\n');
    });
}

if (require.main === module) {
  main();
}
